{"version":3,"sources":["components/todos/Todos.module.css","components/todos/TodoNotFound.module.css","components/todos/TodoCreationForm.module.css","App.module.css","components/header/Header.module.css","components/todos/TodoItem.module.css","components/infobar/InfoBar.module.css","components/header/Header.tsx","util/message-generator.ts","model/message-enum.ts","services/todoService.ts","redux/todo.ts","util/todo-utils.ts","components/todos/TodoCreationForm.tsx","components/todos/TodoItem.tsx","components/message/Message.tsx","components/commons/StyledBadge.tsx","components/infobar/filter.model.ts","components/infobar/InfoBar.tsx","components/todos/TodoNotFound.tsx","components/todos/Todos.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["module","exports","Header","className","classes","header","messageGenerator","errorMessage","text","type","infoMessage","warningMessage","successMessage","persistTodos","todos","localStorage","setItem","JSON","stringify","initialState","message","data","parse","getItem","forEach","todo","hide","e","console","error","fetchTodos","todoSlice","createSlice","name","reducers","addTodo","state","description","payload","msgGen","some","toLowerCase","isTodoAlreadyExist","completed","id","uuid","generateTodo","push","deleteTodo","filter","toggleTodo","targetedTodo","find","filterTodo","actions","TodoCreationForm","todoDescInput","useRef","dispatch","useDispatch","handleAddTodo","a","preventDefault","descValue","current","value","Paper","wrapper","form","onSubmit","TextField","variant","inputRef","size","field","placeholder","inputProps","IconButton","color","edge","PlaylistAdd","fontSize","TodoItem","elevation","style","backgroundColor","Checkbox","checked","onChange","Typography","flex","textDecoration","onClick","Delete","Message","useState","open","setOpen","handleSnackabarClose","useEffect","Snackbar","autoHideDuration","onClose","Alert","severity","StyledBadge","withStyles","theme","badge","right","top","border","palette","background","paper","padding","Badge","filters","InfoBar","useSelector","setFilter","length","countMap","reduce","acc","Done","Pending","countMapper","ToggleButtonGroup","exclusive","_","newFilter","map","ToggleButton","disabled","minWidth","badgeContent","TodoNotFound","title","subtitle","SentimentSatisfied","icon","Todos","showableTodo","sticky","content","store","configureStore","reducer","todoReducer","App","CssBaseline","createTheme","primary","main","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ec462f6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Todos_wrapper__1r61w\",\"title\":\"Todos_title__ttUsS\",\"sticky\":\"Todos_sticky__3lCz6\",\"content\":\"Todos_content__1cJNg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoNotFound_wrapper__3HhNG\",\"title\":\"TodoNotFound_title__dQT8t\",\"subtitle\":\"TodoNotFound_subtitle__1YfTQ\",\"icon\":\"TodoNotFound_icon__1AIcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoCreationForm_wrapper__sx9ub\",\"form\":\"TodoCreationForm_form__265pM\",\"field\":\"TodoCreationForm_field__31_Ig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"content\":\"App_content__3La4L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoItem_wrapper__3J3gn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InfoBar_wrapper__3gE6I\"};","import { FC } from \"react\";\nimport classes from \"./Header.module.css\";\n\n/**\n * This is a Header component\n */\nconst Header: FC = () => (\n    <header className={classes.header}>\n        React TODO App\n    </header>\n);\n\nexport default Header;","import { IMessage } from \"../model/message\";\nimport { ERROR, INFO, SUCCESS, WARNING } from \"../model/message-enum\";\n\n/**\n * This generates the message with given type=(ERROR, INFO, SUCCESS, WARNING)\n * @returns {IMessage} message\n */\nconst messageGenerator = () => ({\n    errorMessage: (text: string): IMessage => {\n        return {\n            type: ERROR,\n            text,\n        };\n    },\n    infoMessage: (text: string): IMessage => {\n        return {\n            type: INFO,\n            text,\n        };\n    },\n    warningMessage: (text: string): IMessage => {\n        return {\n            type: WARNING,\n            text,\n        };\n    },\n    successMessage: (text: string): IMessage => {\n        return {\n            type: SUCCESS,\n            text,\n        };\n    },\n})\n\nexport default messageGenerator();","/**\n * Error States\n */\nexport const ERROR = 'error';\nexport const INFO = 'info';\nexport const SUCCESS = 'success';\nexport const WARNING = 'warning';","import { ITodo } from \"../model/todo\";\n\n/**\n * fetching TODOs from perssitent location, in this case localStorage\n * @returns  {ITodo[]}\n */\nexport const fetchTodos = (): ITodo[] => {\n    let todos: ITodo[] = [];\n    try {\n        const data = JSON.parse(localStorage.getItem('TODOS_LOCAL_STATE') || '[]');\n        if (data) {\n            (data as ITodo[]).forEach(todo => { todo.hide = false; });\n            todos = data;\n        }\n    } catch (e) {\n        console.error('Error Occured: ', e);\n    }\n    return todos;\n}\n\n/**\n * saving the todo state into localStorage\n * @param todos \n */\nexport const persistTodos = (todos: ITodo[]) => {\n    localStorage.setItem('TODOS_LOCAL_STATE', JSON.stringify(todos));\n}\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { ITodoState } from \"../model/todo-state\";\nimport msgGen from \"../util/message-generator\";\nimport { isTodoAlreadyExist, isValidTodoDescription, generateTodo } from \"../util/todo-utils\";\nimport { fetchTodos, persistTodos } from \"../services/todoService\";\n\nconst initialState: ITodoState = {\n    message: null,\n    todos: fetchTodos(),\n};\n\n/**\n * REDUX_SLICE (ACTIONS + REDUCER): This is the to update the store state\n */\nconst todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo(state, { payload: description }: PayloadAction<string>) {\n            // validations before adding the TODO\n            if (!isValidTodoDescription(description)) {\n                state.message = msgGen.errorMessage('Invalid todo!');\n                return state;\n            }\n\n            if (isTodoAlreadyExist(description, state.todos)) {\n                state.message = msgGen.warningMessage(`Todo \"${description}\" already exists!`);\n                return state;\n            }\n\n            const todo = generateTodo(description); // to generalize the TODO generation\n\n            state.todos.push(todo);\n            state.message = msgGen.successMessage(`Todo Added!`);\n            persistTodos(state.todos);\n            return state;\n        },\n        deleteTodo(state, { payload: id }: PayloadAction<string>) {\n            state.todos = state.todos.filter(todo => todo.id !== id); // FilteredOut the selected Item\n            state.message = msgGen.successMessage(`Todo Removed!`);\n            persistTodos(state.todos);\n            return state;\n        },\n        toggleTodo(state, { payload: id }: PayloadAction<string>) {\n            const targetedTodo = state.todos.find(todo => todo.id === id);\n\n            if (targetedTodo) {\n                targetedTodo.completed = !targetedTodo?.completed;\n                if (targetedTodo.completed) {\n                    state.message = msgGen.successMessage(`Todo \"${targetedTodo.description}\" completed!`);\n                } else {\n                    state.message = msgGen.infoMessage(`Todo \"${targetedTodo.description}\" is pending!`);\n                }\n                persistTodos(state.todos);\n                return state;\n            }\n        },\n        filterTodo(state, { payload: filter }: PayloadAction<string>) {\n            switch (filter) {\n                case 'Done':\n                    state.todos.forEach(todo => {\n                        todo.hide = !todo.completed; // hiding the pending todos, showing only Done\n                    });\n                    break;\n                case 'Pending':\n                    state.todos.forEach(todo => {\n                        todo.hide = todo.completed; // hiding the Done todos, showing only Pending\n                    });\n                    break;\n                default:\n                    state.todos.forEach(todo => {\n                        todo.hide = false; // hiding nothing, showing all\n                    });\n                    break;\n            }\n            state.message = msgGen.successMessage(`Todo Filtered!`);\n            persistTodos(state.todos);\n            return state;\n        }\n    }\n});\n\nexport const { addTodo, deleteTodo, toggleTodo, filterTodo } = todoSlice.actions;\nexport default todoSlice.reducer;","import { v4 as uuid } from \"uuid\";\nimport { ITodo } from \"../model/todo\";\n\n/**\n * Validate Todo description\n * @param todoDesc \n * @returns {boolean}\n */\nexport const isValidTodoDescription = (todoDesc: string): boolean => {\n    if (!todoDesc) return false;\n    // [TODO] other possible validations\n    return true;\n}\n\n/**\n * Check whether todo already exists or not\n * @param description \n * @returns {boolean}\n */\nexport const isTodoAlreadyExist = (description: string, todos: ITodo[]) => {\n    return todos.some(todo => todo.description.toLowerCase() === description.toLowerCase());\n}\n\n/**\n * Generate a TODO with given details and defaults\n * @param description \n * @returns {ITodo}\n */\nexport const generateTodo = (description: string): ITodo => ({\n    description,\n    completed: false,\n    id: uuid(),\n})\n\n/**\n * process the todos and generate a map for state All, Done & Pending\n * @param todos \n * @returns {Object} \n */\nexport const countMapper = (todos: ITodo[]) => {\n    return todos.reduce((acc, todo) => {\n        if (todo.completed) {\n            acc.Done += 1;\n        } else {\n            acc.Pending += 1;\n        }\n        return acc;\n    }, { 'Done': 0, 'Pending': 0, 'All': todos.length }) as { [key: string]: number };\n}\n","import { FormEvent, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { IconButton, Paper, TextField } from \"@material-ui/core\";\nimport {\n    PlaylistAdd as PlaylistAddIcon\n} from \"@material-ui/icons\";\n\n\nimport { AppDispatch } from \"../../redux/store\";\nimport { addTodo } from \"../../redux/todo\";\nimport classes from \"./TodoCreationForm.module.css\";\n\n/**\n * Add todo form\n * for more complex form better to use Formik and Yup \n * but this is a fairly simple form hence using plain form\n */\nconst TodoCreationForm = () => {\n    const todoDescInput = useRef<HTMLInputElement>();\n    const dispatch = useDispatch<AppDispatch>();\n\n    const handleAddTodo = async (e: FormEvent) => {\n        e.preventDefault(); // preventing form submision redirections\n        const descValue = todoDescInput.current?.value || '';\n        await dispatch(addTodo(descValue));\n        if (todoDescInput.current?.value) {\n            todoDescInput.current.value = ''; // to clear the input field after adding the TodoItem\n        }\n    }\n\n    return (\n        <Paper className={classes.wrapper}>\n            <form className={classes.form} onSubmit={handleAddTodo}>\n                <TextField\n                    variant=\"outlined\"\n                    inputRef={todoDescInput}\n                    size=\"small\"\n                    className={classes.field}\n                    placeholder=\"Task description\"\n                    inputProps={{\n                        'data-testid': \"todoTextField\"\n                    }}\n                />\n                <IconButton\n                    data-testid=\"addTodoButton\"\n                    color=\"primary\"\n                    edge=\"end\"\n                    size=\"medium\"\n                    type=\"submit\"\n                    aria-label=\"Add Todo\">\n                    <PlaylistAddIcon fontSize=\"small\" />\n                </IconButton>\n            </form>\n        </Paper>\n    );\n}\n\nexport default TodoCreationForm;","import { FC } from \"react\";\nimport { Checkbox, IconButton, Paper, Typography } from \"@material-ui/core\";\nimport { Delete as DeleteIcon } from \"@material-ui/icons\";\nimport { useDispatch } from \"react-redux\";\n\nimport { ITodo } from \"../../model/todo\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { deleteTodo, toggleTodo } from \"../../redux/todo\";\n\nimport classes from \"./TodoItem.module.css\";\n\nexport interface ITodoItemProps {\n    todo: ITodo;\n}\n\n/**\n * Single Todo Item component\n */\nconst TodoItem: FC<ITodoItemProps> = ({ todo }) => {\n    const dispatch = useDispatch<AppDispatch>();\n\n    const handleTodoToggle = () => {\n        dispatch(toggleTodo(todo.id));\n    };\n\n    const handleTodoDelete = () => {\n        dispatch(deleteTodo(todo.id));\n    };\n\n    return (\n        <Paper\n            elevation={3}\n            className={classes.wrapper}\n            style={{\n                backgroundColor: todo.completed ? '#ddd' : '#fff',\n            }}>\n            <Checkbox\n                color=\"primary\"\n                checked={todo.completed}\n                onChange={handleTodoToggle} />\n            <Typography style={{\n                flex: 1,\n                textDecoration: todo.completed ? 'line-through' : 'none',\n                color: todo.completed ? '#555' : '#000',\n            }}>{todo.description}</Typography>\n            <IconButton\n                color=\"primary\"\n                size=\"medium\"\n                onClick={handleTodoDelete}\n                aria-label=\"Delete Todo\">\n                <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n        </Paper>\n    )\n};\n\nexport default TodoItem;","import { FC, useEffect, useState } from \"react\";\nimport { Snackbar } from \"@material-ui/core\";\nimport { Alert } from '@material-ui/lab';\n\nimport { IMessage } from \"../../model/message\";\n\ninterface IMessageProps {\n    message: IMessage;\n}\n\n/**\n * This is a Toast/Snackbar kind of message to show the app changes\n */\nconst Message: FC<IMessageProps> = ({ message }) => {\n    const [open, setOpen] = useState(true);\n\n    const handleSnackabarClose = () => {\n        setOpen(false);\n    }\n\n    useEffect(() => {\n        // show the snackbar each time whenever message prop changes\n        setOpen(true);\n    }, [message])\n\n    return (\n        <Snackbar open={open} autoHideDuration={2500} onClose={handleSnackabarClose}>\n            <Alert\n                elevation={6}\n                variant=\"filled\"\n                onClose={handleSnackabarClose}\n                severity={message.type}>\n                {message.text}\n            </Alert>\n        </Snackbar>\n    );\n}\nexport default Message;","import { Badge, withStyles } from \"@material-ui/core\";\n\n/**\n * This is HoC component having styles within it\n */\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n        right: '50%',\n        top: -8,\n        border: `2px solid ${theme.palette.background.paper}`,\n        padding: '0 4px',\n    },\n}))(Badge);\n\nexport default StyledBadge;","/**\n * Externalise the filters for future extension sake\n */\nexport const filters = ['All', 'Done', 'Pending'];\n","import { FC, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nimport { ITodoState } from \"../../model/todo-state\";\nimport { AppDispatch, RootState } from \"../../redux/store\";\nimport { filterTodo } from \"../../redux/todo\";\nimport { countMapper } from \"../../util/todo-utils\";\n\nimport StyledBadge from \"../commons/StyledBadge\";\n\nimport { filters } from \"./filter.model\";\nimport classes from \"./InfoBar.module.css\";\n\n/**\n * this component shows the info bar for todo app\n * containg count (for all todos state) and filter buttons to show todos with respective state\n */\nconst InfoBar: FC = () => {\n    const { todos } = useSelector<RootState>(state => state.todos) as ITodoState;\n    const dispatch = useDispatch<AppDispatch>();\n    const [filter, setFilter] = useState('All');\n\n    if (!todos || todos.length < 1) return null;\n\n    // To show the count for all states => All, Done, Pending\n    const countMap = countMapper(todos);\n\n    const handleFilterChange = (_: React.MouseEvent<HTMLElement, MouseEvent>, newFilter: string) => {\n        setFilter(newFilter);\n        dispatch(filterTodo(newFilter));\n    }\n\n    return (\n        <section className={classes.wrapper}>\n            <div>\n                <ToggleButtonGroup\n                    value={filter}\n                    exclusive\n                    size=\"small\"\n                    onChange={handleFilterChange}\n                    aria-label=\"TODO Filters\">\n                    {\n                        filters.map(filter => (\n                            <ToggleButton\n                                data-testid={`filter${filter}ToggleBtn`}\n                                key={filter}\n                                value={filter}\n                                disabled={countMap[filter] < 1}\n                                style={{ minWidth: 48 }}\n                                aria-label={filter}>\n                                <StyledBadge badgeContent={countMap[filter]} color=\"primary\">\n                                    {filter}\n                                </StyledBadge>\n                            </ToggleButton>))\n                    }\n                </ToggleButtonGroup> </div>\n\n        </section>\n    )\n}\n\nexport default InfoBar;","import { FC } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { SentimentSatisfied as SentimentSatisfiedIcon } from \"@material-ui/icons\";\n\nimport classes from \"./TodoNotFound.module.css\";\n\ninterface ITodoNotFoundProps {\n    title: string,\n    subtitle: string,\n}\n\n/**\n * this comonent represents that there is no TODO item\n */\nconst TodoNotFound: FC<ITodoNotFoundProps> = ({ title, subtitle }) => (\n    <section className={classes.wrapper}>\n        <SentimentSatisfiedIcon className={classes.icon}/>\n        <Typography variant=\"h6\" className={classes.title}>{title}</Typography>\n        <Typography variant=\"body2\" className={classes.subtitle}>{subtitle}</Typography>\n    </section>\n);\n\nexport default TodoNotFound;","import { Typography } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ITodoState } from \"../../model/todo-state\";\nimport { RootState } from \"../../redux/store\";\nimport TodoCreationForm from \"./TodoCreationForm\";\nimport TodoItem from \"./TodoItem\";\nimport Message from \"../message/Message\";\nimport InfoBar from \"../infobar/InfoBar\";\nimport classes from \"./Todos.module.css\";\nimport TodoNotFound from \"./TodoNotFound\";\n\n/**\n * A wrapper component for Todos functionalities\n */\nconst Todos: FC<{}> = () => {\n    const { todos, message } = useSelector<RootState>(state => state.todos) as ITodoState;\n    const showableTodo = todos.filter(todo => !todo.hide);\n\n    return (\n        <section className={classes.wrapper}>\n            <Typography variant=\"h6\" className={classes.title}>What to do next</Typography>\n            <div className={classes.sticky}>\n                <TodoCreationForm />\n                <InfoBar />\n            </div>\n            <div className={classes.content}>\n                {message && <Message message={message} />}\n                {(!!showableTodo && showableTodo.length > 0) ?\n                    showableTodo.map(todo => (<TodoItem key={todo.id} todo={todo} />)) :\n                    <TodoNotFound title=\"TODOs not Found!\" subtitle=\"Please add some, this will help you to manage your tasks!\" />}\n            </div>\n        </section >);\n};\n\nexport default Todos;","import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"./todo\";\n\n/**\n * REDUX_STORE: This is our soource of truth for Todo app state\n */\nconst store = configureStore({\n    reducer: {\n        todos: todoReducer,\n    }\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;","import { FC } from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport classes from \"./App.module.css\";\n\nimport Header from \"./components/header/Header\";\nimport Todos from \"./components/todos/Todos\";\n\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\n/**\n * This is a wrapper component for our App\n */\nconst App: FC<{}> = () => (\n    <div className={classes.wrapper}>\n        <Provider store={store}>\n            <CssBaseline />\n            <main className={classes.content}>\n                <Header />\n                <Todos />\n            </main>\n        </Provider>\n    </div>\n);\n\nexport default App;","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ThemeProvider, createTheme } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1e90ff'\n    }\n  }\n});\n\nReactDOM.render(\n  <StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}